
import urllib2, traceback, time, re, os, io

location = None

class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        Log("cccccccccccccccccccCookie Manip Right Here")
        Log(headers)
        global location
        location = headers['Location']
        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)

    http_error_301 = http_error_303 = http_error_307 = http_error_302


def MediaObjectsForURL(url):
    Log('service : %s', url)
    try:
        if url.find('/video.mp4/') != -1:
            part = PartObject(key=url.split('/video.mp4/')[1], container='mp4', optimized_for_streaming=True)
            part.streams.append(VideoStreamObject(codec=VideoCodec.H264))
            part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
            return [MediaObject(parts=[part], container='mp4', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC)]
       
        elif url.find('/ott/') != -1:
            return [
                MediaObject(
                    parts = [
                        PartObject(
                            key=Callback(PlayVideoOtt, url=url.split('/ott/')[1]),
                            container='mpegts', 
                        )
                    ],
                    #protocol="hls",
                    container='mpegts', 
                    video_codec=VideoCodec.H264, 
                    audio_codec=AudioCodec.AAC,
                    optimized_for_streaming = True,
                )
            ]
        elif url.find('/redirect.m3u8/') != -1:

            tmp = url.split('/redirect.m3u8/')[1]
            mode, param = tmp.split('|')
            if mode in ['tving', 'wavve']:
                redirect_url = param
            #elif mode == 'wavve':
            #    import urllib
            #    param = urllib.quote(param)
            #    redirect_url = '/:/plugins/com.plexapp.agents.sjva_agent/function/wavve?sjva_url=%s' % param
            
            Log('redirect_url : %s', redirect_url)

            """
            part = PartObject(key=redirect_url, container='mpegts')
            Log(part)
            #Log(part.file)
            #part.width = 1920
            Log('--------------------------')
            #part.streams.append(VideoStreamObject(codec=VideoCodec.H264, width = 1920,
            height = 1080))
            #part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
            media = MediaObject(parts=[part], protocol="hls", container='mpegts', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC, optimized_for_streaming = True, width=1920, height=1080)
            Log('====================')

            Log(part)
            #part.set_default_attr('width', '1080')
            Log(media.to_xml())
            tmp = media.to_xml()
            #import pyamf
            #from pyamf import xml
            #xml.tostring(tmp)
            return [media]
            """

            return [
                MediaObject(
                    parts = [
                        PartObject(
                            key=redirect_url,
                            container='mpegts', 
                        )
                    ],
                    protocol="hls",
                    container='mpegts', 
                    video_codec=VideoCodec.H264, 
                    audio_codec=AudioCodec.AAC,
                    optimized_for_streaming = True,
                    #video_resolution = 'sd', #ios 튕김
                )
            ]
            
        elif url.find('/redirect.mp4/') != -1:
            
            tmp = url.split('/redirect.mp4/')[1]
            mode, param = tmp.split('|')
            if mode in ['naver', 'youtube', 'kakao']:
                redirect_url = param
            Log('redirect_url : %s', redirect_url)
            return [
                MediaObject(
                    parts = [
                        PartObject(
                            key=redirect_url,
                            container='mp4', 
                        )
                    ],
                    container='mp4', 
                    video_codec=VideoCodec.H264, 
                    audio_codec=AudioCodec.AAC,
                    optimized_for_streaming = True,
                )
            ]
        elif url.find('/playvideo/') != -1:
            # 2021-09-14 통합
            tmp = url.split('/playvideo/')[1]
            mode, param = tmp.split('|')
            if mode == 'mp4':
                part = PartObject(key=param, container='mp4', optimized_for_streaming=True)
                part.streams.append(VideoStreamObject(codec=VideoCodec.H264))
                part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
                return [MediaObject(parts=[part], container='mp4', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC)]
            elif mode in ['kakao', 'youtube', 'naver']:
                prefs = get_prefs()
                redirect_url = '{ddns}/metadata/normal/stream?mode={mode}&param={param}'.format(
                    ddns=prefs['server'],
                    mode=mode,
                    param=param,
                )
                Log('mp4 : %s', redirect_url)
                return [
                    MediaObject(
                        parts = [
                            PartObject(
                                key=redirect_url,
                                container='mp4', 
                            )
                        ],
                        container='mp4', 
                        video_codec=VideoCodec.H264, 
                        audio_codec=AudioCodec.AAC,
                        optimized_for_streaming = True,
                    )
                ]
            elif mode in ['tving', 'tving_movie', 'wavve', 'wavve_movie']:
                prefs = get_prefs()
                redirect_url = '{ddns}/metadata/normal/stream?mode={mode}&param={param}'.format(
                    ddns=prefs['server'],
                    mode=mode,
                    param=param,
                )
                Log('hls : %s', redirect_url)
                return [
                    MediaObject(
                        parts = [
                            PartObject(
                                key=redirect_url,
                                container='mpegts', 
                            )
                        ],
                        protocol="hls",
                        container='mpegts', 
                        video_codec=VideoCodec.H264, 
                        audio_codec=AudioCodec.AAC,
                        optimized_for_streaming = True,
                        #video_resolution = 'sd', #ios 튕김
                    )
                ]

        
        elif url.find('/wavve_movie/') != -1:
            return [
                MediaObject(
                    parts = [
                        PartObject(
                            key=Callback(PlayVideoOtt2, url=url.split('/wavve_movie/')[1]),
                            container='mpegts', 
                        )
                    ],
                    #protocol="hls",
                    container='mpegts', 
                    video_codec=VideoCodec.H264, 
                    audio_codec=AudioCodec.AAC,
                    optimized_for_streaming = True,
                )
            ]

    except Exception as e: 
        Log('Exception:%s', e)
        Log(traceback.format_exc())


def get_prefs():
    try:
        ret = {'server':'', 'apikey':'', 'end_noti_filepath':'', 'include_time_info':''}
        CURRENT_PATH = re.sub(r'^\\\\\?\\', '', os.getcwd())
        pref_filepath = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(CURRENT_PATH))), 'Plug-in Support', 'Preferences', 'com.plexapp.agents.sjva_agent.xml')
        if os.path.exists(pref_filepath):
            tfile = io.open(pref_filepath, encoding='utf8')
            text = tfile.read()
            tfile.close()
            if text is not None:
                prefs = XML.ElementFromString(text)
                for child in prefs.getchildren():
                    ret[child.tag] = '' if child.text is None else child.text
    except Exception as e: 
        Log('Exception:%s', e)
        Log(traceback.format_exc())
    return ret


@indirect
def PlayVideoOtt(url, **kwargs):
    url = url.split('|')[1]
    data = JSON.ObjectFromURL(url)
    if data['site'] == 'tving':
        video_url = data['url']
    elif data['site'] == 'wavve':
        url = data['url']
        data = JSON.ObjectFromURL(url)
        video_url = data['playurl'].replace('chunklist5000.m3u8', '5000/chunklist.m3u8')
    Log(video_url)
    return IndirectResponse(VideoClipObject, key=video_url)
    #return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(video_url))


@indirect
def PlayVideoOtt2(url, **kwargs):
    data = JSON.ObjectFromURL(url)
    video_url = data['playurl'].replace('chunklist5000.m3u8', '5000/chunklist.m3u8')
    Log(video_url)
    return IndirectResponse(VideoClipObject, key=video_url)
    #return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(video_url))



"""
IOS : hls, mpegts 아니면 튕김 - 트랜스코딩
"""