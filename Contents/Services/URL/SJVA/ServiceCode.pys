
import urllib2, traceback, time

location = None

class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        Log("cccccccccccccccccccCookie Manip Right Here")
        Log(headers)
        global location
        location = headers['Location']
        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)

    http_error_301 = http_error_303 = http_error_307 = http_error_302


def MediaObjectsForURL(url):
    Log('service : %s', url)
    try:
        if url.find('/video.mp4/') != -1:
            part = PartObject(key=url.split('/video.mp4/')[1], container='mp4', optimized_for_streaming=True)
            part.streams.append(VideoStreamObject(codec=VideoCodec.H264))
            part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
            return [MediaObject(parts=[part], container='mp4', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC)]
        elif url.find('/kakao.mp4/') != -1:
            url = url.split('/kakao.mp4/')[1]
            part = PartObject(key=Callback(PlayVideoKakao, url=url), container='mp4', optimized_for_streaming=True)
            #key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))


            part.streams.append(VideoStreamObject(codec=VideoCodec.H264))
            part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
            return [MediaObject(parts=[part], container='mp4', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC)]

        elif url.find('/video.m3u8/') != -1:
            part = PartObject(key=url.split('/video.m3u8/')[1], protocol='hls', container='mpegts', optimized_for_streaming=True)
            part.streams.append(VideoStreamObject(codec=VideoCodec.H264))
            part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
            return [MediaObject(parts=[part], protocol='hls', container='mpegts', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC)]
        elif url.find('/redirect.m3u8/') != -1:
            Log('bbbbbbbbbbbbbbbbb')
            url = url.split('/redirect.m3u8/')[1]
            #text = HTTP.Request(url).content
            cookieprocessor = urllib2.HTTPCookieProcessor()

            opener = urllib2.build_opener(MyHTTPRedirectHandler, cookieprocessor)
            urllib2.install_opener(opener)

            response = urllib2.urlopen(url)
            Log('ccccccccccccccccccccc')
            Log(response.read())

            Log(cookieprocessor.cookiejar)

            #Log(text)
            global location

            
            #location = 'https://gtm-spotv.brightcovecdn.com/1f2651c2fea34be9850bfdedf8d9cfdb/ap-northeast-1/5764318566001/playlist.m3u8?__nn__=5981484117001&hdnea=st=1608912000~exp=1608915600~acl=/1f2651c2fea34be9850bfdedf8d9cfdb/ap-northeast-1/5764318566001/*~hmac=0cc9190eecb31843b4bf580bc1150537afe1ffbeb979458200cf38d9733ff36a'

            #location = 'https://pip-vod-xcdn.tving.com/VOD/TJ/PR10011242/PR10011242_EPI0010_01_t35.smil/content_5500000.m3u8?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXRoIjoiL1ZPRC9USi9QUjEwMDExMjQyL1BSMTAwMTEyNDJfRVBJMDAxMF8wMV90MzUuc21pbCIsImlzcyI6InR2aW5nLmNvbSIsImV4cCI6MTYwODkyODczOX0.5D-1u-6hk9iCEfd-Nrq0PON2HtKlNEeQEPsVwzoVbYg&content_type=VOD'

            Log(location)
            
            part = PartObject(key=location, protocol='hls', container='mpegts', optimized_for_streaming=True)
            part.streams.append(VideoStreamObject(codec=VideoCodec.H264))
            part.streams.append(AudioStreamObject(codec=AudioCodec.AAC, channels=2))
            return [MediaObject(parts=[part], protocol='hls', container='mpegts', video_codec=VideoCodec.H264, audio_codec=AudioCodec.AAC)]
    except Exception as e: 
        Log('Exception:%s', e)
        Log(traceback.format_exc())


@indirect
def PlayVideoKakao(url, **kwargs):
    content_id = url.split('/')[-1]
    url = 'https://tv.kakao.com/katz/v2/ft/cliplink/{}/readyNplay?player=monet_html5&profile=HIGH&service=kakao_tv&section=channel&fields=seekUrl,abrVideoLocationList&startPosition=0&tid=&dteType=PC&continuousPlay=false&contentType=&{}'.format(content_id, int(time.time()))
    data = JSON.ObjectFromURL(url)
    video_url = data['videoLocation']['url']
    return IndirectResponse(VideoClipObject, key=video_url)

